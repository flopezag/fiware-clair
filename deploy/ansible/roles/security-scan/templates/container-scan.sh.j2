#!/bin/bash
set -xv

user="{{ user }}"
password="{{ password }}"

usage() {
    echo "Usage: $0 [-pv] [IMAGE_NAME]"
    echo
    echo "Options:"
    echo " -p : Pull images before running scan"
    echo " -v : verbose output"
    echo
    echo "[IMAGE_NAME] : (Optional) FIWARE GE name to be analysed."
    echo "               It should be present in the enabler.json file."
    echo "               If it is not provided the Docker images are "
    echo "               obtained from the enablers.json file."
    exit 1
}

redirect_stderr() {
    if [[ ${VERBOSE} -eq 1 ]]; then
        "$@"
    else
        "$@" 2>/dev/null
    fi
}

redirect_all() {
    if [[ ${VERBOSE} -eq 1 ]]; then
        "$@"
    else
        "$@" 2>/dev/null >/dev/null
    fi
}

security_analysis() {
    echo
    echo "Clair CVE Security Scan... "

    enabler=$@

    redirect_all echo "Pulling from "$enabler"..."

    # Get the list of docker images from the enabler.json taking into account the FIWARE GE name
    cmd='.enablers[] | select(.name == "'${enabler}'") | .image'
    images=$(jq -r "${cmd}" enablers.json)

    # From the images, we need to iterate for the different values
    for i in ${images//,/ }
    do
        # call your procedure/other scripts here below
        echo "$i"

        redirect_all docker pull "$i"
        redirect_all echo

        labels=$(docker inspect --type=image "$i" 2>/dev/null | jq .[].Config.Labels)

        if [[ ${PULL} -eq 1 ]];
        then
          redirect_all echo "Pulling Clair content ..."
          redirect_all docker-compose pull
          redirect_all echo
        fi

        redirect_all echo "Security analysis of "$i" image..."
        extension="$(date +%Y%m%d_%H%M%S)-cve.json"
        # filename=$(echo "$i" | awk -F '/' -v a="$extension" '{print $2 a}')
        # enabler=$(echo "$i" | awk -F '/' '{print $2}')

        # Extract the name of the docker image
        short_name=$(echo $i | awk -F '/' '{print $2}' | awk -F ':' '{print $1}')
        echo "$short_name"

        filename=$(echo "$enabler" | awk  -v a="$extension" -v b="$short_name" '{print $0"-"b"-"a}')

        redirect_stderr docker-compose run --rm scanner "$i" > ${filename}
        ret=$?
        redirect_all echo

        # If we execute the analysis for more than one then it only should be executed with the
        # last component is analysed
        redirect_all echo "Removing docker instances..."
        redirect_all docker-compose down --rmi all
        redirect_all echo

        line=$(grep 'latest: Pulling from arminc\/clair-db' ${filename})

        # Just for the 1st time...
        if [[ -n ${line} ]]; then
            # Delete first 3 lines of the file due to the first time that it is executed
            # it includes 3 extra no needed lines
            sed -i '1,3 d' ${filename}
        fi

        # Just to finish, send the data to the nexus instance
        # redirect_all curl -v -u ${user}':'${password} --upload-file ${filename}  https://nexus.lab.fiware.org/repository/security/check/${enabler}/cve/${filename}

        # Send an email to the owner of the FIWARE GE

    done
}

docker_bench_security() {
    echo
    echo "Docker Bench Security Scan... "
    enabler=$@

    cd ./docker-bench-security

    id=$(docker images | grep -E "${image}" | awk -e '{print $3}')

    redirect_all echo "Creating an instance of the GE ${image}"
    cmd='.enablers[] | select(.name == "'${enabler}'") | .compose'
    compose=$(jq -r "${cmd}" enablers.json)
    redirect_all echo "Compose: $compose"
    redirect_all echo

    mv docker-compose.yml docker-compose.old
    wget -q $compose
    compose=$(echo $compose | awk -F '/' '{print $NF}')
    mv $compose docker-compose.yml
    redirect_all docker-compose pull
    redirect_all docker-compose up &

    # We need to wait until it is ready the docker-compose service
    sleep 120

    redirect_all ./docker-bench-security.sh  -c container_images,container_runtime,docker_security_operations

    extension="$(date +%Y%m%d_%H%M%S)-bench.json"
    filename="$@-$extension"
    # enabler=$(echo "$@" | awk -F '/' '{print $2}')

    mv docker-bench-security.sh.log.json ${filename}

    redirect_all echo "Clean up the docker-compose of the testing component"
    redirect_all docker-compose down --rmi all

    # redirect_all curl -v -u ${user}':'${password} --upload-file ${filename}  https://nexus.lab.fiware.org/repository/security/check/${enabler}/bench-security/${filename}

    cd ..
}

init() {
    echo
    echo "Initialize the scan..."

    BASEDIR=$(cd $(dirname "$0") && pwd)
    cd "$BASEDIR"

    if [[ ! -f "docker-compose.yml" ]]; then
        wget -q https://raw.githubusercontent.com/flopezag/fiware-clair/develop/Common/cve_severity_scan.yml
        mv cve_severity_scan.yml docker-compose.yml
    fi

    # Need to check that the file exist

    if [[ ! -d "docker-bench-security" ]]; then
        redirect_all git clone https://github.com/docker/docker-bench-security.git
    fi

    if [[ ! -f "enablers.json" ]]; then
        wget -q https://raw.githubusercontent.com/flopezag/fiware-clair/develop/Common/enablers.json
        cp enablers.json ./docker-bench-security/enablers.json
    fi

    # Need to check that the file exists

    cd "$BASEDIR"
}

function print_result {
  file_clair=$1
  file_bench=$2

  echo
  echo "CVE vulnerabilities"
  echo
  for a in Unknown Negligible Low Medium High ;
  do
    data=$(more $file_clair | jq ".[].vulnerabilities[].severity | select (.==\"${a}\")" | wc -l)
    echo "    $a  $data"
  done

  TOTAL=$(more $file_clair  | jq '.[].vulnerabilities | length')
  echo "    TOTAL: ${TOTAL}"




  echo
  echo
  echo "CIS Docker Benchmark (security best practices)"
  echo
  for a in PASS INFO NOTE WARN;
  do
    data=$(more $file_bench | jq ".tests[].results[].result | select (.==\"${a}\")" | wc -l)
    echo "    $a  $data"
  done

  TOTAL=$(more ./docker-bench-security/orion\:latest20200811_190148.json  | jq '.tests[].results | length' | awk '{sum+=$1} END{printf("%d\n",sum)}')
  echo "    TOTAL: ${TOTAL}"
  echo
}

PULL=0
VERBOSE=0

while getopts ":phv" opt; do
    case ${opt} in
        p)
            PULL=1
            ;;
        v)
            VERBOSE=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            ;;
        h)
            usage
            ;;
    esac
done
shift $(($OPTIND -1))

init

if [[ -n $1 ]]; then
    security_analysis "$1"
    docker_bench_security "$1"
    # anchore analysis: https://docs.anchore.com/current/docs/engine/engine_installation/
else
    for ge in `more enablers.json | jq .enablers[].name | sed 's/"//g'`
    do
      security_analysis ${ge}
      docker_bench_security ${ge}
      # anchore analysis: https://docs.anchore.com/current/docs/engine/engine_installation/
      redirect_all echo
      redirect_all echo
    done
fi

exit ${ret}
